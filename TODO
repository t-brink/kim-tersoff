* optimize

** parts of force calculation are still done even if not needed

** it is currently half to a third the performance compared with native
   tersoff for serial

   it seems to scale better and mpi with enough cores can beat native on my
   i7-3770 PC at home

*** check optimization options first! maybe KIM is more conservative than
    LAMMPS in its Makefile (seems both have -O3, though, as far as I can see)

*** then ask on mailing list if this slowdown is expected

*** only then start seriously wondering about own code!

*** I somehow believe that my KIM code was faster once for serial
    calculations... I could be wrong, though.


* test suite

** something like the vc_forces_numer_deriv, but which iterates through
   several PBCs: (0,0,0), (0,0,1), (0,1,0), (0,1,1), ...

   several box shapes

   several crystal structures with and without defects

   some sort of amorphous structure

** a test box, computed by LAMMPS including potential energies and forces;
   the potential should give the same values that are included in the dump
   file +/- a tolerance; this could also be a more general purpose program

** both of those may be interesting for the project at large

** why are there no properties on the KIM website for the Tersoff driver?

** especially test changing the published parameters!


* comment code better

* use assert() macro to check bounds etc and disable for release builds
